/**
* User account and session management
* Provides HTTP endpoints to manage User Accounts and User Sessions.
*
* The version of the OpenAPI document: 0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.equisoft.accountservice.sdk.apis

import com.equisoft.accountservice.sdk.models.CreateOrUpdateOrganizationPayload
import com.equisoft.accountservice.sdk.models.CreateOrganizationPayload
import com.equisoft.accountservice.sdk.models.CreateRole
import com.equisoft.accountservice.sdk.models.ErrorPayload
import com.equisoft.accountservice.sdk.models.ListUserOrganizations
import com.equisoft.accountservice.sdk.models.Organization
import com.equisoft.accountservice.sdk.models.OrganizationCreated
import com.equisoft.accountservice.sdk.models.RoleCreated

import com.equisoft.accountservice.sdk.infrastructure.ApiClient
import com.equisoft.accountservice.sdk.infrastructure.ClientException
import com.equisoft.accountservice.sdk.infrastructure.ClientError
import com.equisoft.accountservice.sdk.infrastructure.ServerException
import com.equisoft.accountservice.sdk.infrastructure.ServerError
import com.equisoft.accountservice.sdk.infrastructure.MultiValueMap
import com.equisoft.accountservice.sdk.infrastructure.RequestConfig
import com.equisoft.accountservice.sdk.infrastructure.RequestMethod
import com.equisoft.accountservice.sdk.infrastructure.ResponseType
import com.equisoft.accountservice.sdk.infrastructure.Success
import com.equisoft.accountservice.sdk.infrastructure.toMultiValue

class OrganizationApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("com.equisoft.accountservice.sdk.baseUrl", "http://localhost")
        }
    }

    /**
    * Create or update an organization for a given uuid
    * 
    * @param uuid The organization identifier 
    * @param createOrUpdateOrganizationPayload  
    * @return OrganizationCreated
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createOrUpdateOrganization(uuid: kotlin.String, createOrUpdateOrganizationPayload: CreateOrUpdateOrganizationPayload) : OrganizationCreated {
        val localVariableConfig = createOrUpdateOrganizationRequestConfig(uuid = uuid, createOrUpdateOrganizationPayload = createOrUpdateOrganizationPayload)

        val localVarResponse = request<OrganizationCreated>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OrganizationCreated
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation createOrUpdateOrganization
    *
    * @param uuid The organization identifier 
    * @param createOrUpdateOrganizationPayload  
    * @return RequestConfig
    */
    fun createOrUpdateOrganizationRequestConfig(uuid: kotlin.String, createOrUpdateOrganizationPayload: CreateOrUpdateOrganizationPayload) : RequestConfig {
        val localVariableBody: kotlin.Any? = createOrUpdateOrganizationPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PUT,
            path = "/organizations/{uuid}".replace("{"+"uuid"+"}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Create or update organization roles for a given uuid
    * 
    * @param uuid  
    * @param roleId  
    * @param createRole  
    * @return RoleCreated
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createOrUpdateRole(uuid: kotlin.String, roleId: kotlin.String, createRole: CreateRole) : RoleCreated {
        val localVariableConfig = createOrUpdateRoleRequestConfig(uuid = uuid, roleId = roleId, createRole = createRole)

        val localVarResponse = request<RoleCreated>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RoleCreated
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation createOrUpdateRole
    *
    * @param uuid  
    * @param roleId  
    * @param createRole  
    * @return RequestConfig
    */
    fun createOrUpdateRoleRequestConfig(uuid: kotlin.String, roleId: kotlin.String, createRole: CreateRole) : RequestConfig {
        val localVariableBody: kotlin.Any? = createRole
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PUT,
            path = "/organizations/{uuid}/roles/{roleId}".replace("{"+"uuid"+"}", "$uuid").replace("{"+"roleId"+"}", "$roleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Creates a new organization
    * 
    * @param createOrganizationPayload  
    * @return OrganizationCreated
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createOrganization(createOrganizationPayload: CreateOrganizationPayload) : OrganizationCreated {
        val localVariableConfig = createOrganizationRequestConfig(createOrganizationPayload = createOrganizationPayload)

        val localVarResponse = request<OrganizationCreated>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OrganizationCreated
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation createOrganization
    *
    * @param createOrganizationPayload  
    * @return RequestConfig
    */
    fun createOrganizationRequestConfig(createOrganizationPayload: CreateOrganizationPayload) : RequestConfig {
        val localVariableBody: kotlin.Any? = createOrganizationPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/organizations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Create organization roles for a given uuid
    * 
    * @param uuid  
    * @param createRole  
    * @return RoleCreated
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createRole(uuid: kotlin.String, createRole: CreateRole) : RoleCreated {
        val localVariableConfig = createRoleRequestConfig(uuid = uuid, createRole = createRole)

        val localVarResponse = request<RoleCreated>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RoleCreated
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation createRole
    *
    * @param uuid  
    * @param createRole  
    * @return RequestConfig
    */
    fun createRoleRequestConfig(uuid: kotlin.String, createRole: CreateRole) : RequestConfig {
        val localVariableBody: kotlin.Any? = createRole
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/organizations/{uuid}/roles".replace("{"+"uuid"+"}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Delete organization
    * 
    * @param uuid The organization identifier 
    * @param xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteOrganization(uuid: kotlin.String, xUserUuid: kotlin.String?) : Unit {
        val localVariableConfig = deleteOrganizationRequestConfig(uuid = uuid, xUserUuid = xUserUuid)

        val localVarResponse = request<Any?>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation deleteOrganization
    *
    * @param uuid The organization identifier 
    * @param xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
    * @return RequestConfig
    */
    fun deleteOrganizationRequestConfig(uuid: kotlin.String, xUserUuid: kotlin.String?) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xUserUuid?.apply { localVariableHeaders["X-User-Uuid"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.DELETE,
            path = "/organizations/{uuid}".replace("{"+"uuid"+"}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Get detailed information about an organization.
    * 
    * @param uuid The organization identifier 
    * @param xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
    * @return Organization
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getOrganization(uuid: kotlin.String, xUserUuid: kotlin.String?) : Organization {
        val localVariableConfig = getOrganizationRequestConfig(uuid = uuid, xUserUuid = xUserUuid)

        val localVarResponse = request<Organization>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Organization
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getOrganization
    *
    * @param uuid The organization identifier 
    * @param xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
    * @return RequestConfig
    */
    fun getOrganizationRequestConfig(uuid: kotlin.String, xUserUuid: kotlin.String?) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xUserUuid?.apply { localVariableHeaders["X-User-Uuid"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{uuid}".replace("{"+"uuid"+"}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * List organizations
    * 
    * @param max Max number of organizations per page. 
    * @param pageToken Page token to start with. (optional)
    * @param parent Parent uuid. (optional)
    * @param xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
    * @return ListUserOrganizations
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listOrganization(max: kotlin.Int, pageToken: kotlin.String?, parent: kotlin.String?, xUserUuid: kotlin.String?) : ListUserOrganizations {
        val localVariableConfig = listOrganizationRequestConfig(max = max, pageToken = pageToken, parent = parent, xUserUuid = xUserUuid)

        val localVarResponse = request<ListUserOrganizations>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListUserOrganizations
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation listOrganization
    *
    * @param max Max number of organizations per page. 
    * @param pageToken Page token to start with. (optional)
    * @param parent Parent uuid. (optional)
    * @param xUserUuid Uuid of the user for whom the call is made. Used to apply access and security rules (optional)
    * @return RequestConfig
    */
    fun listOrganizationRequestConfig(max: kotlin.Int, pageToken: kotlin.String?, parent: kotlin.String?, xUserUuid: kotlin.String?) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("max", listOf(max.toString()))
                if (pageToken != null) {
                    put("pageToken", listOf(pageToken.toString()))
                }
                if (parent != null) {
                    put("parent", listOf(parent.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xUserUuid?.apply { localVariableHeaders["X-User-Uuid"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

}
