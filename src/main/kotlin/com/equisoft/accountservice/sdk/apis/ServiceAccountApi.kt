/**
* User account and session management
* Provides HTTP endpoints to manage User Accounts and User Sessions.
*
* The version of the OpenAPI document: 0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.equisoft.accountservice.sdk.apis

import com.equisoft.accountservice.sdk.models.ErrorPayload
import com.equisoft.accountservice.sdk.models.ServiceAccountCreationSchema
import com.equisoft.accountservice.sdk.models.ServiceAccountSchema
import com.equisoft.accountservice.sdk.models.ServiceAccountUpdateSchema
import com.equisoft.accountservice.sdk.models.ServiceAccountUuidSchema

import com.equisoft.accountservice.sdk.infrastructure.ApiClient
import com.equisoft.accountservice.sdk.infrastructure.ClientException
import com.equisoft.accountservice.sdk.infrastructure.ClientError
import com.equisoft.accountservice.sdk.infrastructure.ServerException
import com.equisoft.accountservice.sdk.infrastructure.ServerError
import com.equisoft.accountservice.sdk.infrastructure.MultiValueMap
import com.equisoft.accountservice.sdk.infrastructure.RequestConfig
import com.equisoft.accountservice.sdk.infrastructure.RequestMethod
import com.equisoft.accountservice.sdk.infrastructure.ResponseType
import com.equisoft.accountservice.sdk.infrastructure.Success
import com.equisoft.accountservice.sdk.infrastructure.toMultiValue

class ServiceAccountApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("com.equisoft.accountservice.sdk.baseUrl", "http://localhost")
        }
    }

    /**
    * Creates a new service account
    * 
    * @param serviceAccountCreationSchema  
    * @return ServiceAccountUuidSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createServiceAccount(serviceAccountCreationSchema: ServiceAccountCreationSchema) : ServiceAccountUuidSchema {
        val localVariableConfig = createServiceAccountRequestConfig(serviceAccountCreationSchema = serviceAccountCreationSchema)

        val localVarResponse = request<ServiceAccountUuidSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ServiceAccountUuidSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation createServiceAccount
    *
    * @param serviceAccountCreationSchema  
    * @return RequestConfig
    */
    fun createServiceAccountRequestConfig(serviceAccountCreationSchema: ServiceAccountCreationSchema) : RequestConfig {
        val localVariableBody: kotlin.Any? = serviceAccountCreationSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/serviceAccounts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Get detailed information about a user account.
    * 
    * @param uuid Service account identifier 
    * @return ServiceAccountSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getServiceAccount(uuid: kotlin.String) : ServiceAccountSchema {
        val localVariableConfig = getServiceAccountRequestConfig(uuid = uuid)

        val localVarResponse = request<ServiceAccountSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ServiceAccountSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getServiceAccount
    *
    * @param uuid Service account identifier 
    * @return RequestConfig
    */
    fun getServiceAccountRequestConfig(uuid: kotlin.String) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/serviceAccounts/{uuid}".replace("{"+"uuid"+"}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Searches service accounts that match ALL params. If none are provided, returns all service accounts
    * 
    * @param name  (optional)
    * @return kotlin.collections.List<ServiceAccountSchema>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchServiceAccount(name: kotlin.String?) : kotlin.collections.List<ServiceAccountSchema> {
        val localVariableConfig = searchServiceAccountRequestConfig(name = name)

        val localVarResponse = request<kotlin.collections.List<ServiceAccountSchema>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ServiceAccountSchema>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation searchServiceAccount
    *
    * @param name  (optional)
    * @return RequestConfig
    */
    fun searchServiceAccountRequestConfig(name: kotlin.String?) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/serviceAccounts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Updates a service account by uuid
    * 
    * @param uuid Service account identifier 
    * @param serviceAccountUpdateSchema  
    * @return ServiceAccountUuidSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateServiceAccount(uuid: kotlin.String, serviceAccountUpdateSchema: ServiceAccountUpdateSchema) : ServiceAccountUuidSchema {
        val localVariableConfig = updateServiceAccountRequestConfig(uuid = uuid, serviceAccountUpdateSchema = serviceAccountUpdateSchema)

        val localVarResponse = request<ServiceAccountUuidSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ServiceAccountUuidSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation updateServiceAccount
    *
    * @param uuid Service account identifier 
    * @param serviceAccountUpdateSchema  
    * @return RequestConfig
    */
    fun updateServiceAccountRequestConfig(uuid: kotlin.String, serviceAccountUpdateSchema: ServiceAccountUpdateSchema) : RequestConfig {
        val localVariableBody: kotlin.Any? = serviceAccountUpdateSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PATCH,
            path = "/serviceAccounts/{uuid}".replace("{"+"uuid"+"}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

}
