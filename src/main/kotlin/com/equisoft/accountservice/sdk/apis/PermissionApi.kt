/**
* User account and session management
* Provides HTTP endpoints to manage User Accounts and User Sessions.
*
* The version of the OpenAPI document: latest
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.equisoft.accountservice.sdk.apis

import com.equisoft.accountservice.sdk.models.CreateOrUpdatePermissionPayload
import com.equisoft.accountservice.sdk.models.ErrorPayload
import com.equisoft.accountservice.sdk.models.PermissionCreated

import com.equisoft.accountservice.sdk.infrastructure.ApiClient
import com.equisoft.accountservice.sdk.infrastructure.ClientException
import com.equisoft.accountservice.sdk.infrastructure.ClientError
import com.equisoft.accountservice.sdk.infrastructure.ServerException
import com.equisoft.accountservice.sdk.infrastructure.ServerError
import com.equisoft.accountservice.sdk.infrastructure.MultiValueMap
import com.equisoft.accountservice.sdk.infrastructure.RequestConfig
import com.equisoft.accountservice.sdk.infrastructure.RequestMethod
import com.equisoft.accountservice.sdk.infrastructure.ResponseType
import com.equisoft.accountservice.sdk.infrastructure.Success
import com.equisoft.accountservice.sdk.infrastructure.toMultiValue

class PermissionApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("com.equisoft.accountservice.sdk.baseUrl", "http://localhost")
        }
    }

    /**
    * Create or update a permission for a given code
    * 
    * @param code The permission code 
    * @param createOrUpdatePermissionPayload  
    * @return PermissionCreated
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createOrUpdatePermission(code: kotlin.String, createOrUpdatePermissionPayload: CreateOrUpdatePermissionPayload) : PermissionCreated {
        val localVariableConfig = createOrUpdatePermissionRequestConfig(code = code, createOrUpdatePermissionPayload = createOrUpdatePermissionPayload)

        val localVarResponse = request<PermissionCreated>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionCreated
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation createOrUpdatePermission
    *
    * @param code The permission code 
    * @param createOrUpdatePermissionPayload  
    * @return RequestConfig
    */
    fun createOrUpdatePermissionRequestConfig(code: kotlin.String, createOrUpdatePermissionPayload: CreateOrUpdatePermissionPayload) : RequestConfig {
        val localVariableBody: kotlin.Any? = createOrUpdatePermissionPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PUT,
            path = "/permissions/{code}".replace("{"+"code"+"}", "$code"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

}
